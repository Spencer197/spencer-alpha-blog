require 'test_helper'

class NewArticleTest < ActionDispatch::IntegrationTest
  
  def setup
    @user = User.create!(username: "Spencer", email: "spencer@example.com",
                        password: "password", password_confirmation: "password")
    @article = Article.create(title: "Test Article", description: "This is just a test article.", user: @user)
    @article2 = @user.articles.build(title: "Another Test Article", description: "This is yet another test article.")
    @article2.save 
  end

  test "should get articles index" do
    get articles_url
    assert_response :success
  end
  
  test "should get articles index listing" do
    get articles_path
    assert_template 'articles/index'
    assert_select "a[href=?]", article_path(@article), text: @article.title#Asserts that the article title link should appear in the body on the page.
    assert_select "a[href=?]", article_path(@article2), text: @article2.title#Asserts that the article2 title link should appear in the body on the page.
  end
  
  test "should get articles show page" do
    sign_in_as(@user, "password")
    get article_path(@article)
    assert_template 'articles/show'
    assert_match @article.title, response.body#Checks for article name in the body of show page.
    assert_match @article.description, response.body#Checks for description
    assert_match @user.username, response.body#Checks for user name.
    assert_match 'a[href=?]', edit_article_path(@article), text: "Edit this article."
    assert_select 'a[href=?]', article_path(@article), text: "Delete this article."
    assert_select 'a[href=?]', articles_path, text: "Return to articles listing."
  end

  test "create new valid article" do
    sign_in_as(@user, "password")#Signs in a test user before running test.
    get new_article_path
    assert_template 'articles/new'
    title_of_article = "Test Article"
    description_of_article = "This is just a test article."
    assert_difference 'Article.count', 1 do#Increments Article.count by 1.
      post articles_path, params: { article: {title: title_of_article, description: description_of_article}} 
    end
    follow_redirect!
    assert_match title_of_article.titleize, response.body
    assert_match description_of_article, response.body
  end
  
  test "reject invalid article submissions" do
    get new_article_path
    assert_template 'articles/new'
    assert_no_difference 'Article.count' do#Article.count is not incremented.
      post articles_path, params: {article: {name: " ",description: " "} }#If article has blank name and description it will be rejected.
    end
    assert_template 'articles/new'#Returns user to the new article view.
    assert_select 'h1.panel-title'#Shows an error message generated by _errors.html.erb
    assert_select 'div.panel-body'#Lists the errors from error messages generated by _errors.html.erb.
  end
end